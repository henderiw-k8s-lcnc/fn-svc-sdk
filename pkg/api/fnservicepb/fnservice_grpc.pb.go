// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pkg/api/proto/fnservice.proto

package fnservicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceFunctionClient is the client API for ServiceFunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceFunctionClient interface {
	Apply(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceFunctionClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceFunctionClient(cc grpc.ClientConnInterface) ServiceFunctionClient {
	return &serviceFunctionClient{cc}
}

func (c *serviceFunctionClient) Apply(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/fnservice.ServiceFunction/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceFunctionClient) Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fnservice.ServiceFunction/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceFunctionServer is the server API for ServiceFunction service.
// All implementations must embed UnimplementedServiceFunctionServer
// for forward compatibility
type ServiceFunctionServer interface {
	Apply(context.Context, *Request) (*Response, error)
	Delete(context.Context, *Request) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceFunctionServer()
}

// UnimplementedServiceFunctionServer must be embedded to have forward compatible implementations.
type UnimplementedServiceFunctionServer struct {
}

func (UnimplementedServiceFunctionServer) Apply(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedServiceFunctionServer) Delete(context.Context, *Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceFunctionServer) mustEmbedUnimplementedServiceFunctionServer() {}

// UnsafeServiceFunctionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceFunctionServer will
// result in compilation errors.
type UnsafeServiceFunctionServer interface {
	mustEmbedUnimplementedServiceFunctionServer()
}

func RegisterServiceFunctionServer(s grpc.ServiceRegistrar, srv ServiceFunctionServer) {
	s.RegisterService(&ServiceFunction_ServiceDesc, srv)
}

func _ServiceFunction_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceFunctionServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fnservice.ServiceFunction/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceFunctionServer).Apply(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceFunction_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceFunctionServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fnservice.ServiceFunction/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceFunctionServer).Delete(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceFunction_ServiceDesc is the grpc.ServiceDesc for ServiceFunction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceFunction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fnservice.ServiceFunction",
	HandlerType: (*ServiceFunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _ServiceFunction_Apply_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ServiceFunction_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/proto/fnservice.proto",
}
